// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using JamendoAPI;
//
//    var trackResult = TrackResult.FromJson(jsonString);

namespace JamendoAPI
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TrackResult
    {
        [JsonProperty("headers")]
        public Headers Headers { get; set; }

        [JsonProperty("results")]
        public Track[] Tracks { get; set; }
    }

    public partial class Headers
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("error_message")]
        public string ErrorMessage { get; set; }

        [JsonProperty("warnings")]
        public string Warnings { get; set; }

        [JsonProperty("results_count")]
        public long ResultsCount { get; set; }

        [JsonProperty("next")]
        public Uri Next { get; set; }
    }

    public partial class Track
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("artist_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ArtistId { get; set; }

        [JsonProperty("artist_name")]
        public string ArtistName { get; set; }

        [JsonProperty("artist_idstr")]
        public string ArtistIdstr { get; set; }

        [JsonProperty("album_name")]
        public string AlbumName { get; set; }

        [JsonProperty("album_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AlbumId { get; set; }

        [JsonProperty("license_ccurl")]
        public Uri LicenseCcurl { get; set; }

        [JsonProperty("position")]
        public long Position { get; set; }

        [JsonProperty("releasedate")]
        public DateTimeOffset Releasedate { get; set; }

        [JsonProperty("album_image")]
        public Uri AlbumImage { get; set; }

        [JsonProperty("audio")]
        public Uri Audio { get; set; }

        [JsonProperty("audiodownload")]
        public Uri Audiodownload { get; set; }

        [JsonProperty("prourl")]
        public string Prourl { get; set; }

        [JsonProperty("shorturl")]
        public Uri Shorturl { get; set; }

        [JsonProperty("shareurl")]
        public Uri Shareurl { get; set; }

        [JsonProperty("waveform")]
        public string Waveform { get; set; }

        [JsonProperty("image")]
        public Uri Image { get; set; }
    }

    public partial class TrackResult
    {
        public static TrackResult FromJson(string json) => JsonConvert.DeserializeObject<TrackResult>(json, JamendoAPI.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this TrackResult self) => JsonConvert.SerializeObject(self, JamendoAPI.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
